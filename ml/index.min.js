let recognizer;var start=!1;function predictWord(){const words=recognizer.wordLabels();recognizer.listen(({scores})=>{scores=Array.from(scores).map((s,i)=>({score:s,word:words[i]}));scores.sort((s1,s2)=>s2.score-s1.score)},{probabilityThreshold:0.7})}
const NUM_FRAMES=3;let examples=[];let left=0;let right=0;let noise=0;function collect(label){if(label==null){return recognizer.stopListening()}
recognizer.listen(async({spectrogram:{frameSize,data}})=>{let vals=normalize(data.subarray(-frameSize*NUM_FRAMES));examples.push({vals,label});if(label==0){left++;document.querySelector('#leftd').textContent=`${Math.floor(left/40)} seconds of audio collected`}
if(label==1){right++;document.querySelector('#rightd').textContent=`${Math.floor(right/40)} seconds of audio collected`}
if(label==2){noise++;document.querySelector('#noised').textContent=`${Math.floor(noise/40)} seconds of audio collected`}
document.querySelector('#console').textContent=`${Math.floor(examples.length/40)} total seconds of audio collected`},{overlapFactor:0.999,includeSpectrogram:!0,invokeCallbackOnNoiseAndUnknown:!0})}
function normalize(x){const mean=-100;const std=10;return x.map(x=>(x-mean)/std)}
const INPUT_SHAPE=[NUM_FRAMES,232,1];let model;async function train(){if(examples.length<16){document.querySelector('#console').textContent=`Please input more data...`;return}
toggleButtons(!1);const ys=tf.oneHot(examples.map(e=>e.label),3);const xsShape=[examples.length,...INPUT_SHAPE];const xs=tf.tensor(flatten(examples.map(e=>e.vals)),xsShape);await model.fit(xs,ys,{batchSize:16,epochs:5,callbacks:{onEpochEnd:(epoch,logs)=>{document.querySelector('#console').textContent=`Accuracy: ${(logs.acc * 100).toFixed(1)}% Epoch: ${epoch + 1}`}}});tf.dispose([xs,ys]);toggleButtons(!0)}
function buildModel(){model=tf.sequential();model.add(tf.layers.depthwiseConv2d({depthMultiplier:8,kernelSize:[NUM_FRAMES,3],activation:'relu',inputShape:INPUT_SHAPE}));model.add(tf.layers.maxPooling2d({poolSize:[1,2],strides:[2,2]}));model.add(tf.layers.flatten());model.add(tf.layers.dense({units:3,activation:'softmax'}));const optimizer=tf.train.adam(0.01);model.compile({optimizer,loss:'categoricalCrossentropy',metrics:['accuracy']})}
function toggleButtons(enable){document.querySelectorAll('button').forEach(b=>b.disabled=!enable)}
function flatten(tensors){const size=tensors[0].length;const result=new Float32Array(tensors.length*size);tensors.forEach((arr,i)=>result.set(arr,i*size));return result}
right=!1;left=!1;async function moveSlider(labelTensor){const label=(await labelTensor.data())[0];if(label==2){right=!1;left=!1;return}
if(label==1){right=!0}
if(label==0){left=!0}
let delta=0.2;const prevValue=+document.getElementById('output').value;document.getElementById('output').value=prevValue+(label===0?-delta:delta)}
function listen(){var demo=document.querySelector('#demo');demo.style.visibility='hidden';setInterval(draw1,10);if(recognizer.isListening()){recognizer.stopListening();toggleButtons(!0);document.getElementById('listen').textContent='Start';return}
toggleButtons(!1);document.getElementById('listen').textContent='Stop';document.getElementById('listen').disabled=!1;recognizer.listen(async({spectrogram:{frameSize,data}})=>{const vals=normalize(data.subarray(-frameSize*NUM_FRAMES));const input=tf.tensor(vals,[1,...INPUT_SHAPE]);const probs=model.predict(input);const predLabel=probs.argMax(1);await moveSlider(predLabel);tf.dispose([input,probs,predLabel])},{overlapFactor:0.999,includeSpectrogram:!0,invokeCallbackOnNoiseAndUnknown:!0})}
async function app(){recognizer=speechCommands.create('BROWSER_FFT');await recognizer.ensureModelLoaded();buildModel()}
app();var context;var dx=2;var dy=1;var y=100;var x=150;function draw1(){context=myCanvas.getContext('2d');context.clearRect(0,0,300,300);context.beginPath();context.fillStyle="green"
context.arc(x,y,10,0,Math.PI*2,!0);context.closePath();context.fill();if(x<10||x>200){dx=-dx}
if(y<20||y>150){dy=-dy}
if(right===!0){x+=dx}
if(left===!0){x-=dx}
y+=dy}