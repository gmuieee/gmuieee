import tensorflow as tf
from tensorflow import keras
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def load_data(view = True):
	'''

	Dataset: EMNIST Balanced Dataset
	47 Classes, 1316000 Samples
	Classes are mapped in specific indexed order (seen below)
	'''
	
	train_data_path = ''
	test_data_path = ''
	train_data = pd.read_csv(train_data_path)	
	
	if(view):
		print(train_data.head(10))
	
	class_mapping= '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
	
	train_shape = train_data.shape
	num_classes = len(train_data[0].unique())
	row_num = 8


def build(img_size):

	model = keras.models.Sequential()
	model.add(keras.layers.Reshape((img_size,img_size,1), input_shape = (784,))
	model.add(keras.layers.Conv2D(filters = 12, kernel_size = (5,5), strides = 2, activation = 'relu', input_shape = (img_size,img_size,1)))
	model.add(keras.layers.Dropout(0.5))
	model.add(keras.layers.Conv2D(filters = 18, kernel_size = (3,3), stride=2, activation = 'relu'))
	model.add(keras.layers.Dropout(0.5))
        model.add(keras.layers.Conv2D(filters = 24, kernel_size=(2,2),activation='relu'))
	model.add(keras.layers.Flatten())
	model.add(keras.layers.Dense(units = 150, activation = 'relu'))
        model.add(keras.layers.Dense(units = 150, activation = "softmax"))
	...

def train():
	data_gen = keras.preprocessing.image.ImageDataGenerator(validation_split = 0.2)
	aug_data_gen = keras.preprocessing.image.ImageDataGenerator(validation_split = 0.2, width_shift_range = 0.2, height_shift_range = 0.2, rotation_range = 60, zoom_range = 0.2, shear_range = 0.3)
	
	train_data_gen = data_gen.flow(X, y, subset="training")
	dev_data_gen = data_gen.flow(X,y, subset = "validation")
	
	history = model.fit_generator(training_data_generator, steps_per_epoch=500, epochs = 5, validation_data = dev_data_gen)


def test():
	test_x, test_y = img_label_load(test_data_path)
	test_data_gen = data_gen.flow(X,y)
	model.evaluate_generator(test_data_gen)



'''
'''


def model_to_savedmodel():
	model_name = model.input_names[0]
	estimator_model = keras.estimator.model_to_estimator(keras_model = model, model_dir = "./filename")

	from functools import partial
	
	input_ph = tf.placeholder(tf.string, shape=[None], name = "image_binary")
	images = tf.map_fn(partial(tf.image.decode_image, channels=1),input_ph, dtype=tf.uint8)
	images = tf.cast(images, tf.float32) /255
	images.set_shape([None, 28, 28, 1])
	

	op = tf.estimator.export.ServingInputReceiver((model_input_name: images))





